# Based on https://gist.github.com/maratori/47a4d00457a92aa426dbd48a18776322

version: "2"

formatters:
  enable:
    - gofmt
    - gci
    # - goimports
    # - golines
    # - gofumpt
linters:
  default: none
  enable:
    - asasalint # Check for pass []any as any in variadic func(...any)
    - asciicheck # Checks that all code identifiers do not have non-ASCII symbols in the name
    - bodyclose # Checks whether HTTP response body is closed successfully
    - canonicalheader # Checks whether net/http.Header uses canonical header
    # - containedctx # Detects struct contained context.Context field
    # - contextcheck # Check whether the function uses a non-inherited context
    - cyclop # Checks function and package cyclomatic complexity
    - depguard # Checks if package imports are in a list of acceptable packages
    - dupl # Detects duplicate fragments of code
    # - dupword # Checks for duplicate words in the source code
    # - durationcheck # Check for two durations multiplied together
    - errcheck # A program for checking unchecked errors in Go code
    # - errchkjson # Checks types passed to the json encoding functions
    - errname # Checks that sentinel errors are prefixed with the Err and error types are suffixed with the Error
    - errorlint # Finds code that will cause problems with the error wrapping scheme introduced in Go 1.13
    - exhaustive # Check exhaustiveness of enum switch statements
    - exptostd # Detects functions from golang.org/x/exp/ that can be replaced by std functions
    # - fatcontext # Detects nested contexts in loops and function literals
    - forbidigo # Forbids identifiers
    - funcorder # Checks the order of functions, methods, and constructors
    # - funlen # Checks for long functions
    # - ginkgolinter # Enforces standards of using ginkgo and gomega
    - gocheckcompilerdirectives # Checks that go compiler directive comments (//go:) are valid
    - gochecknoinits # Checks that no init functions are present in Go code
    - gochecksumtype # Run exhaustiveness checks on Go "sum types"
    # - gocognit # Computes and checks the cognitive complexity of functions
    - goconst # Finds repeated strings that could be replaced by a constant
    - gocritic # Provides diagnostics for bugs, performance, and style issues
    # - gocyclo # Computes and checks the cyclomatic complexity of functions
    # - godot # Check if comments end in a period
    # - godox # Detects usage of FIXME, TODO, and other keywords inside comments
    # - goheader # Checks if file header matches a pattern
    - gomoddirectives # Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod
    - goprintffuncname # Checks that printf-like functions are named with 'f' at the end
    - gosec # Inspects source code for security problems
    # - gosmopolitan # Report i18n/l10n anti-patterns in your Go codebase
    # - grouper # Analyze expression groups
    - govet # Examines Go source code and reports suspicious constructs
    - iface # Detect the incorrect use of interfaces, helping developers avoid interface pollution
    - importas # Enforces consistent import aliases
    - inamedparam # Reports interfaces with unnamed method parameters
    - ineffassign # Detects when assignments to existing variables are not used
    # - interfacebloat # A linter that checks the number of methods inside an interface
    - intrange # Finds places where for loops could make use of an integer range
    # - maintidx # Measures the maintainability index of each function
    - makezero # Finds slice declarations with non-zero initial length
    - mirror # Reports wrong mirror patterns of bytes/strings usage
    # - misspell # Finds commonly misspelled English words
    - mnd # An analyzer to detect magic numbers
    - musttag # Enforces field tags in (un)marshaled structs
    # - nakedret # Checks that functions with naked returns are not longer than a maximum size
    # - nestif # Reports deeply nested if statements
    - nilerr # Finds code that returns nil even if it checks that the error is not nil
    - nilnesserr # Reports constructs that check for err != nil, but return a different nil value error
    - nilnil # Checks that there is no simultaneous return of nil error and an invalid value
    - noctx # Finds sending HTTP request without context.Context
    - nolintlint # Reports ill-formed or insufficient nolint directives
    # - nosprintfhostport # Checks for misuse of Sprintf to construct a host with port in a URL
    # - paralleltest # Detects missing usage of t.Parallel() method in your Go test
    # - perfsprint # Checks that fmt.Sprintf can be replaced with a faster alternative
    # - prealloc # Finds slice declarations that could potentially be pre-allocated
    - predeclared # Finds code that shadows one of Go's predeclared identifiers
    # - promlinter # Checks Prometheus metrics naming via promlint
    - protogetter # Reports direct reads from proto message fields when getters should be used
    - reassign # Checks that package variables are not reassigned
    - recvcheck # Checks for receiver type consistency
    - revive # Fast, configurable, extensible linter for Go
    - rowserrcheck # Checks whether Rows.Err of rows is checked successfully
    - sloglint # Ensures consistent code style when using log/slog
    # - spancheck # Checks for mistakes with OpenTelemetry/Census spans
    - sqlclosecheck # Checks that sql.Rows, sql.Stmt, sqlx.NamedStmt, pgx.Query are closed
    - staticcheck # The set of rules from staticcheck
    # - tagalign # Checks that struct tags are well aligned
    # - testableexamples # Linter checks if examples are testable (have an expected output)
    - testifylint # Checks usage of github.com/stretchr/testify
    - testpackage # Linter that makes you use a separate _test package
    - thelper # Detects test helpers that do not start with t.Helper()
    # - tparallel # Detects inappropriate usage of t.Parallel() method in your Go test codes
    - unconvert # Removes unnecessary type conversions
    - unparam # Reports unused function parameters
    - unused # Checks Go code for unused constants, variables, functions, and types
    - usestdlibvars # Detects the possibility to use variables/constants from the Go standard library
    - usetesting # Reports uses of functions with replacement inside the testing package
    # - wrapcheck # Checks that errors returned from external packages are wrapped
  settings:
    cyclop:
      max-complexity: 30
      package-average: 10.0
    depguard:
      rules:
        deprecated:
          files:
            - $all
          deny:
            - pkg: github.com/golang/protobuf
              desc: Use google.golang.org/protobuf instead, see https://developers.google.com/protocol-buffers/docs/reference/go/faq#modules
            - pkg: github.com/satori/go.uuid
              desc: Use github.com/google/uuid instead, satori's package is not maintained
            - pkg: github.com/gofrs/uuid$
              desc: Use github.com/gofrs/uuid/v5 or later, it was not a go module before v5
            - pkg: github.com/aws/aws-sdk-go
              desc: Use v2
            - pkg: io/ioutil
              desc: deprecated, replaced by os and io
            - pkg: github.com/pkg/errors
              desc: Replaced by std errors pkg
            - pkg: github.com/lib/pq
              desc: maintenance mode
        avoid:
          files:
            - $all
          deny:
            - pkg: math/rand$
              desc: Use math/rand/v2 instead, see https://go.dev/blog/randv2
            - pkg: log$
              desc: Use log/slog instead, see https://go.dev/blog/slog
            - pkg: github.com/kataras/isis
              desc: Bad practices from maintained
            - pkg: github.com/bouk/monkey
              desc: avoid monkey patching
            - pkg: github.com/agiledragon/gomonkey
              desc: avoid monkey patching
            - pkg: github.com/gin-gonic/gin
              desc: avoid net/http incompatible libraries
            # - pkg: github.com/labstack/echo/v4
            #   desc: avoid net/http incompatible libraries
            - pkg: github.com/fiber/v3
              desc: avoid net/http incompatible libraries
    errcheck:
      check-type-assertions: true
      check-blank: true
      disable-default-exclusions: false
    errorlint:
      errorf: false
      errorf-multi: true
    govet:
      enable-all: true
      disable:
        - fieldalignment
        - shadow
    nolintlint:
      require-specific: true
    revive:
      rules:
        - name: package-comments
          disabled: true
        - name: exported
          disabled: true
    sloglint:
      no-global: default
      attr-only: true
      static-msg: true
      context: scope
issues:
  max-same-issues: 0
  max-issues-per-linter: 0
